<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[(三)SpringBoot配置和多环境]]></title>
    <url>%2F2019%2F01%2F28%2F(%E4%B8%89)SpringBoot%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A4%9A%E7%8E%AF%E5%A2%83md%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;在第一个Springboot项目中我们知道，SpringBoot项目的默认 配置文件在main/resources下的application.properties下，我们接直接用之前的项目了解一下配置文件。&#160; &#160; &#160; &#160;application.properties配置文件中 配置整个springboot所需的配置，例如端口，项目名称，redis信息，到后续开发springcloud时的注册中心等等的配置信息，当然也可以自己自定义的配置项。 &#160; &#160; &#160; &#160;我们打开application.properties，添加配置项： server.port=8083 name=this is default &#160; &#160; &#160; &#160;然后改写之前的HelloSpringBootController类 @RestController public class HelloSpringBootController { @Value(&quot;${name}&quot;) private String name; @RequestMapping(&quot;/sayHello&quot;) public String sayHello() { return &quot;Hello ,&quot;+this.name; } } 接着启动项目可以看见： 启动了8083 端口 我们访问一下http://127.0.0.1:8083/sayHello，效果如下： 访问 成功，配置项正确获取了。 但是在我们正常的开发中会有多个环境，测试环境，开发环境，生产环境，联调环境等等，每个环境下的配置不尽相同，那就需要我们配置多环境的配置文件： 首先在main/resources下 创建以下几个环境配置文件 修改各个配置文件的端口和name值 在application.properties下设置： spring.profiles.active=prod 确定当前使用的是哪个环境，这边环境的值与application-prod.properties中-后面的值对应，这是SpringBoot约定好的， 启动项目： 会发现启动了application-prod,properties配置下的8082端口，因为我们设置了当前的环境是prod，所以application-prod,properties生效了。 在浏览器中输入http://127.0.0.1:8082/sayHello，效果如下： 获取到 了正确的端口和值，可以依次测试各个环境。 基本的多环境配置如上述。 但是在工作项目中我们将一个项目打包之后发布，springboot 项目使用java -jar xxx.jar 来启动项目。那么我们现在打包之后部署在开发环境中，配置文件中应该这样配置 spring.profiles.active=dev那么如果我们要将项目部署到测试环境中，是不是需要修改一下配置文件，然后重新打包部署呢？显然不是的，当然有更好的办法来解决。 首先我们将 项目打包，当然我们一般会有一些自动打包的脚本，但是这边我就 直接使用cmd打包 打开cmd进入当前项目的目录 运行mvn install （首先确认你已经安装了maven并且配置好环境变量，mvn是可以运行的） 运行成功之后进入target目录会看见，项目已经打包成jar了 cmd 继续进入target目录 （jar所在的目录） 运行： java -jar PropertiesSpringBoot-0.0.1-SNAPSHOT.jar –spring.profiles.active=test运行jar包，并使用–配置项=值，来设置配置项 可以看见启动了测试环境8083 访问正确！]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(二)创建一个简单的SpringBoot应用]]></title>
    <url>%2F2019%2F01%2F28%2F(%E4%BA%8C)%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84SpringBoot%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;接下来，我们就 一起来创建第一个SpringBoot 应用。创建SpringBoot项目过程中就会发现为什么SpringBoot会这么受欢迎了。关于IDE,写文章的时候使用的是Spring Tool Suite（STS），现在已经转为Idea，看个人喜好吧，自己怎么舒服怎么来，在工作中也没有强制一定要使用什么IDE。 言归正传， 下面的教程都是使用STS。 创建项目创建一个Spring Starter project 点击NEXT 选择对用的版本和WEB项目然后选择finish首先创建一个项目 POM.XML打开项目的POM.XML 你会发现自动给你导入了一些依赖&#160; &#160; &#160; &#160;首先导入SpringBoot的依赖，因为我们刚才创建项目的时候选择了web， 所以还 自动导入了spring-boot-starter-web依赖。你也可以创建一个普通的 Maven然后将这些依赖导入一下是一个意思。 项目目录 项目入口类：类上使用@SpringBootApplication 标识 该类为项目的入口类 然后我们创建一个包 编写Controller &#160; &#160; &#160; &#160;注意我们创建的包必须是在程序入口类 所在包的子包，这样写的@RestController才会被扫描到 &#160; &#160; &#160; &#160;接着我们启动项目，在入口类上 右键==》Run as ==》 Spring Boot App 程序成功启动，默认端口为 8080 浏览器上输入：http://localhost:8080/sayHello 输出。完毕 一个简单的SpringBoot的项目就搭建成功了，非常方便，少去了spring spring mvc的配置，就可以快速的创建一个web项目。 一般来说使用SpringBoot的其他功能的步骤： 1.添加依赖 2..使用注解编写一些配置或代码 就可以了 。 题外话：&#160; &#160; &#160; &#160;启动的时候这块 标志是可以修改的，在java/main/resource 下创建一个banner.txt 文件，里面写入你要的内容，启动就可以看见这块标识已经 被修改了。 要生成类似的字体可以访问http://patorjk.com/software/taag去生成.其实没啥用。。。]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(一)SpringBoot概述]]></title>
    <url>%2F2019%2F01%2F28%2F(%E4%B8%80)SpringBoot%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[什么是SpringBoot&#160; &#160; &#160; &#160;我们知道Spring使用一个轻量级的企业开发一站式解决方案，提供了最主要的IOC、AOP等相关支持，但是在开发过程中会发现，项目中多而繁杂的配置文件总是让人头疼。而SpringBoot就是使用默认的配置来简化开发过程。 &#160; &#160; &#160; &#160;随着动态语言的发展，传统的Java开发显得格外的笨重，效率低，配置文件多且杂，部署流程复杂，集成第三方难度大，所以 出现了SpringBoot。&#160; &#160; &#160; &#160;之前看过一句话,什么是SpringBoot？SpringBoot是一个专注于框架的框架。说白了SpringBoot就是简化开发， 提高效率的这么一个东西。 SpringBoot应用可以打包成jar 以jar包 形式运行 SpringBoot内职tomcat、jetty等，我们可 以像运行java application那样运行一个java web项目 SpringBoot提供 starter来简化Maven配置，我们只需要导入几个starter就可以省去好多 maven的配置 SpringBoot无代码生成和XML配置，使用“习惯优于配置“” 的想法来开发项目，在使用它的时候一般使用一些 注解，就可以完成，不需要写代码 SpringBoot对第三方的支持，支持各种第三方，只要导入依赖就能快速的使用，例如Mybatis等 &#160; &#160; &#160; &#160;说了这么多，还不如动手来试试 接下来我们来创建一个SpringBoot应用。 网上有很多大佬写了SpringBoot系列博客，该博文主要作为自己的技术总结，也希望对正在学习的朋友们有些许帮助。]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
