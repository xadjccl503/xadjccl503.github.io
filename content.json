{"meta":{"title":"xadjccl","subtitle":null,"description":null,"author":"xadjccl","url":"http://yoursite.com"},"pages":[{"title":"关于作者","date":"2019-01-27T06:12:29.000Z","updated":"2019-01-27T07:20:50.396Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-27T06:12:22.000Z","updated":"2019-01-27T07:43:00.742Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-01-27T06:11:55.000Z","updated":"2019-01-27T07:43:11.025Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"(四)SpringBoot页面模板与JSP","date":"2019-01-28T09:54:33.444Z","updated":"2019-01-29T06:06:30.453Z","comments":true,"path":"2019/01/28/(四)SpringBoot页面模板与JSP/","link":"","permalink":"http://yoursite.com/2019/01/28/(四)SpringBoot页面模板与JSP/","excerpt":"","text":"title: (四)SpringBoot页面模板也JSPtags: SpringBootcategories: SpringBootcomments: falsephotos: “../../../../resource/image/SpringBootLogo.jpg” #概述虽然在我们现在工作中，后端 人员一般只写接口，前后端分离，一般也使用不到页面模板，但是官方推荐使用thymeleaf，这边就蛮记录一下，对于jsp做过web开发的同志应该都会清楚，一些老项目基本是使用jsp，虽然官方已经不建议使用了，但是还是要了解一下。 #Thymeleaf 了解thymeleaf之前我们要知道，SpringBoot默认的几个静态页面的目录： /static、/public、/resources 、/META-INF/resources 创建项目我们可以将项目中使用到的静态文件放在这几个项目中 首先我们创建一个SpringBoot项目 1.加入thymeleaf依赖··· org.springframework.boot spring-boot-starter-thymeleaf ··· 2.编写controller··· @Controller public class ThymeleafController { @RequestMapping(value = &quot;/testthymeleaf&quot;) public ModelAndView test(ModelAndView mv) { mv.setViewName(&quot;thymeleaf1&quot;); mv.addObject(&quot;name&quot;,&quot;欢迎使用Thymeleaf!&quot;); return mv; } } ···3.在src/main/resources/templates目录下创建 thymeleaf.html··· &lt;!DOCTYPE html&gt; thymeleaf demo Hello thymeleaf &lt;h2 th:text=&quot;&apos;名称：&apos;+${name}&quot;&gt;默认值&lt;/h2&gt; &lt;/body&gt; &lt;/html&gt; ··· 4.配置thymel信息，在application.properties下配置··· #thymelea模板配置spring.thymeleaf.prefix=classpath:/templates/spring.thymeleaf.suffix=.htmlspring.thymeleaf.mode=HTML5spring.thymeleaf.encoding=UTF-8spring.thymeleaf.content-type=text/htmlspring.thymeleaf.cache=falsespring.resources.chain.strategy.content.enabled=truespring.resources.chain.strategy.content.paths=/**··· 5.启动项目，浏览器访问http://127.0.0.1:8080/testthymeleaf 至此，Thymeleaf整合成功，当然thymeleaf还有很多内容，但是我个人也没用过，只是稍微了解 。 如果按照上面的做法 之后访问报404 的话 检查一下SpringBoot的版本，设置为1.3.3就可以解决了。 JSP对于一些老项目基本都是使用jsp，所以SpringBoot也有提供对jsp的支持 1.添加jsp的依赖 &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;/dependency&gt; 2.编写controller @Controller public class JspController { @GetMapping(&quot;/testjsp&quot;) public ModelAndView index() { ModelAndView mv = new ModelAndView(); mv.addObject(&quot;name&quot;, &quot;ccl&quot;); //模版名称，实际的目录为：src/main/webapp/jsp/index.html mv.setViewName(&quot;test&quot;); return mv; } } 3.在src/main/webapp/WEB-INF/jsp下创建test.jsp &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charsetUTF-8&quot;&gt; &lt;title&gt;jsp demo &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Jsp&lt;/h1&gt; &lt;h2 &gt;这是 ${name} 的jsp&lt;/h2&gt; &lt;/body&gt; &lt;/html&gt; 4.配置jsp，在application.properties里配置： //jsp 支持 spring.mvc.view.suffix=.jsp spring.mvc.view.prefix=/WEB-INF/jsp/ 如果SpringBoot的版本太低的话配置为： //jsp 支持 spring.view.suffix=.jsp spring.view.prefix=/WEB-INF/jsp/ 5.启动项目，浏览器访问http://127.0.0.1:8080/testjsp 至此。SpringBoot整合jsp成功。","categories":[],"tags":[]},{"title":"(三)SpringBoot配置和多环境","slug":"(三)SpringBoot配置和多环境","date":"2019-01-28T06:46:59.842Z","updated":"2019-01-28T08:57:19.781Z","comments":false,"path":"2019/01/28/(三)SpringBoot配置和多环境/","link":"","permalink":"http://yoursite.com/2019/01/28/(三)SpringBoot配置和多环境/","excerpt":"配置文件介绍&#160; &#160; &#160; &#160;在第一个Springboot项目中我们知道，SpringBoot项目的默认 配置文件在main/resources下的application.properties下，我们接直接用之前的项目了解一下配置文件。","text":"配置文件介绍&#160; &#160; &#160; &#160;在第一个Springboot项目中我们知道，SpringBoot项目的默认 配置文件在main/resources下的application.properties下，我们接直接用之前的项目了解一下配置文件。&#160; &#160; &#160; &#160;application.properties配置文件中 配置整个springboot所需的配置，例如端口，项目名称，redis信息，到后续开发springcloud时的注册中心等等的配置信息，当然也可以自己自定义的配置项。 新增配置项&#160; &#160; &#160; &#160;我们打开application.properties，添加配置项： server.port=8083 name=this is default &#160; &#160; &#160; &#160;然后改写之前的HelloSpringBootController类 @RestController public class HelloSpringBootController { @Value(&quot;${name}&quot;) private String name; @RequestMapping(&quot;/sayHello&quot;) public String sayHello() { return &quot;Hello ,&quot;+this.name; } } 运行 接着启动项目可以看见： 启动了8083 端口 我们访问一下http://127.0.0.1:8083/sayHello，效果如下： 访问 成功，配置项正确获取了。 多环境配置但是在我们正常的开发中会有多个环境，测试环境，开发环境，生产环境，联调环境等等，每个环境下的配置不尽相同，那就需要我们配置多环境的配置文件： 首先在main/resources下 创建以下几个环境配置文件 修改各个配置文件的端口和name值 指定环境在application.properties下设置： spring.profiles.active=prod 确定当前使用的是哪个环境，这边环境的值与application-prod.properties中-后面的值对应，这是SpringBoot约定好的， 启动项目： 会发现启动了application-prod,properties配置下的8082端口，因为我们设置了当前的环境是prod，所以application-prod,properties生效了。 在浏览器中输入http://127.0.0.1:8082/sayHello，效果如下： 获取到 了正确的端口和值，可以依次测试各个环境。 基本的多环境配置如上述。 配置文件加载顺序 在命令行中传入的参数。 SPRING APPLICATION JSON 中 的属性. SPRING APPLICATION JSON 是 以JSON格式配置在系统环境变量中的内容。 3.javacomp/env中的JNDI属性。 4.Java的系统属性，可以通过system.getpropertieso获得的内容。 5.操作系统的环境变量。 6.通过random.*配置的随机属性。 7.位于当前应用怬包之外，针对不同(profile}环境的配置文件内容，例如application-{profile}·properties或是YAML定义的配置文件。 8.位于当前应用jar包之内，针对不同{profile}环境的配置文件内容，例如application-{profile}.properties或是YAML定义的配置文件。 9.位于当前应用jar包之外的application.properties和YAML配置内容。 10.位于当前应用jar包之内的application.properties和YAML配置内容。 11.在@Configuration注解修改的类中，通过@propertysource注解定义的属性。 12.应用默认属性，使用SpringApplication.setDefaultproperties定义的内容。优先级按上面的顺序由高到低，数字越小优先级越高。 项目打包发布但是在工作项目中我们将一个项目打包之后发布，springboot 项目使用java -jar xxx.jar 来启动项目。那么我们现在打包之后部署在开发环境中，配置文件中应该这样配置 spring.profiles.active=dev那么如果我们要将项目部署到测试环境中，是不是需要修改一下配置文件，然后重新打包部署呢？显然不是的，当然有更好的办法来解决。 首先我们将 项目打包，当然我们一般会有一些自动打包的脚本，但是这边我就 直接使用cmd打包 打开cmd进入当前项目的目录 运行mvn install （首先确认你已经安装了maven并且配置好环境变量，mvn是可以运行的） 运行成功之后进入target目录会看见，项目已经打包成jar了 cmd 继续进入target目录 （jar所在的目录） 运行： java -jar PropertiesSpringBoot-0.0.1-SNAPSHOT.jar --spring.profiles.active=test运行jar包，并使用–配置项=值，来设置配置项 可以看见启动了测试环境8083 访问正确！","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/categories/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(二)创建一个简单的SpringBoot应用","slug":"(二)创建一个简单的SpringBoot应用","date":"2019-01-28T06:16:10.974Z","updated":"2019-01-28T06:38:01.381Z","comments":false,"path":"2019/01/28/(二)创建一个简单的SpringBoot应用/","link":"","permalink":"http://yoursite.com/2019/01/28/(二)创建一个简单的SpringBoot应用/","excerpt":"&#160; &#160; &#160; &#160;接下来，我们就 一起来创建第一个SpringBoot 应用。创建SpringBoot项目过程中就会发现为什么SpringBoot会这么受欢迎了。关于IDE,写文章的时候使用的是Spring Tool Suite（STS），现在已经转为Idea，看个人喜好吧，自己怎么舒服怎么来，在工作中也没有强制一定要使用什么IDE。","text":"&#160; &#160; &#160; &#160;接下来，我们就 一起来创建第一个SpringBoot 应用。创建SpringBoot项目过程中就会发现为什么SpringBoot会这么受欢迎了。关于IDE,写文章的时候使用的是Spring Tool Suite（STS），现在已经转为Idea，看个人喜好吧，自己怎么舒服怎么来，在工作中也没有强制一定要使用什么IDE。 言归正传， 下面的教程都是使用STS。 创建项目创建一个Spring Starter project 点击NEXT 选择对用的版本和WEB项目然后选择finish首先创建一个项目 POM.XML打开项目的POM.XML 你会发现自动给你导入了一些依赖&#160; &#160; &#160; &#160;首先导入SpringBoot的依赖，因为我们刚才创建项目的时候选择了web， 所以还 自动导入了spring-boot-starter-web依赖。你也可以创建一个普通的 Maven然后将这些依赖导入一下是一个意思。 项目目录 项目入口类：类上使用@SpringBootApplication 标识 该类为项目的入口类 然后我们创建一个包 编写Controller &#160; &#160; &#160; &#160;注意我们创建的包必须是在程序入口类 所在包的子包，这样写的@RestController才会被扫描到 &#160; &#160; &#160; &#160;接着我们启动项目，在入口类上 右键==》Run as ==》 Spring Boot App 程序成功启动，默认端口为 8080 浏览器上输入：http://localhost:8080/sayHello 输出。完毕 一个简单的SpringBoot的项目就搭建成功了，非常方便，少去了spring spring mvc的配置，就可以快速的创建一个web项目。 一般来说使用SpringBoot的其他功能的步骤： 1.添加依赖 2..使用注解编写一些配置或代码 就可以了 。 题外话：&#160; &#160; &#160; &#160;启动的时候这块 标志是可以修改的，在java/main/resource 下创建一个banner.txt 文件，里面写入你要的内容，启动就可以看见这块标识已经 被修改了。 要生成类似的字体可以访问http://patorjk.com/software/taag去生成.其实没啥用。。。","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/categories/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"(一)SpringBoot概述","slug":"(一)SpringBoot概述","date":"2019-01-28T01:53:01.871Z","updated":"2019-01-28T06:27:01.013Z","comments":false,"path":"2019/01/28/(一)SpringBoot概述/","link":"","permalink":"http://yoursite.com/2019/01/28/(一)SpringBoot概述/","excerpt":"什么是SpringBoot&#160; &#160; &#160; &#160;我们知道Spring使用一个轻量级的企业开发一站式解决方案，提供了最主要的IOC、AOP等相关支持，但是在开发过程中会发现，项目中多而繁杂的配置文件总是让人头疼。而SpringBoot就是使用默认的配置来简化开发过程。","text":"什么是SpringBoot&#160; &#160; &#160; &#160;我们知道Spring使用一个轻量级的企业开发一站式解决方案，提供了最主要的IOC、AOP等相关支持，但是在开发过程中会发现，项目中多而繁杂的配置文件总是让人头疼。而SpringBoot就是使用默认的配置来简化开发过程。 &#160; &#160; &#160; &#160;随着动态语言的发展，传统的Java开发显得格外的笨重，效率低，配置文件多且杂，部署流程复杂，集成第三方难度大，所以 出现了SpringBoot。&#160; &#160; &#160; &#160;之前看过一句话,什么是SpringBoot？SpringBoot是一个专注于框架的框架。说白了SpringBoot就是简化开发， 提高效率的这么一个东西。 SpringBoot应用可以打包成jar 以jar包 形式运行 SpringBoot内职tomcat、jetty等，我们可 以像运行java application那样运行一个java web项目 SpringBoot提供 starter来简化Maven配置，我们只需要导入几个starter就可以省去好多 maven的配置 SpringBoot无代码生成和XML配置，使用“习惯优于配置“” 的想法来开发项目，在使用它的时候一般使用一些 注解，就可以完成，不需要写代码 SpringBoot对第三方的支持，支持各种第三方，只要导入依赖就能快速的使用，例如Mybatis等 &#160; &#160; &#160; &#160;说了这么多，还不如动手来试试 接下来我们来创建一个SpringBoot应用。 网上有很多大佬写了SpringBoot系列博客，该博文主要作为自己的技术总结，也希望对正在学习的朋友们有些许帮助。","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/categories/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]}]}